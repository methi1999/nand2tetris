// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction, b=outMc1, sel=instruction[15], out=toAReg);

    And(a=instruction[15], b=instruction[5], out=d1andisC);
    Not(in=instruction[15], out=isA);
    Or(a=d1andisC, b=isA, out=loadA);
    ARegister(in=toAReg, load=loadA, out=aout, out[0..14]=addressM, out=pcin);
    And(a=instruction[3], b=instruction[15], out=writeM);

    Mux16(a=aout, b=inM, sel=instruction[12], out=aluiny);

    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=outMc2, load=loadD, out=aluinx);

    ALU(x=aluinx, y=aluiny, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outMc1, out=outMc2, zr=zr, ng=ng);

    Or(a=zr, b=ng, out=notpos);
    Not(in=notpos, out=ispos);

    XorPair(a=instruction[2], b=instruction[1], c=instruction[0], d=ispos, out=o1);
    XorPair(a=instruction[0], b=instruction[2], c=instruction[1], d=zr, out=o2);
    XorPair(a=instruction[0], b=instruction[1], c=instruction[2], d=ng, out=o3);
    And(a=instruction[1], b=instruction[0], out=tempand);
    And(a=instruction[2], b=tempand, out=unconditional);
    Or(a=o1, b=o2, out=tempo1);
    Or(a=o3, b=unconditional, out=tempo2);
    Or(a=tempo2, b=tempo1, out=finalloadc);
    And(a=finalloadc, b=instruction[15], out=finalload);

    Not(in=finalload, out=incC);
    Mux(a=true, b=incC, sel=instruction[15], out=toinc);

    PC(in=pcin, load=finalload, inc=toinc, reset=reset, out[0..14]=pc);

}